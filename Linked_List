class Node:
    def __init__(self,data,next=None):
        self.data=data
        self.next=next

c=Node(4)
b=Node(3,c)
a=Node(2,b)

x=Node(1,Node(2,Node(3,Node(4,Node(5)))))
def insert_at_last(head,data):
    new=Node(data)
    if head==None:
        return new
    p=head
    while p.next:
        p=p.next
    p.next=new
    return head
def delete_k(head,k):
    if(k<0 or k>=count_Node(head)):
        print("Not Posssible")
        return head
    if(k==0):
        head=head.next
        return head
    p=head
    for i in range(1,k):
        # print(f"count: {i}")
        p=p.next
    if(p.next!=None):
        p.next=p.next.next
    return head
        
        
def insert_at_front(head,data):
    new=Node(data)
    if head==None:
        return new
    new.next=head
    head=new
    return head

    
def print_Node(n):
    while n:
        print(n.data)
        n=n.next
def count_Node(n):
    c=0
    while n:
        c+=1 
        n=n.next
    print(f"This Linked List has {c} Nodes")
    return c
x=insert_at_front(x,9)

x=insert_at_last(x,6)
print_Node(x)
# count_Node(x)
# print(t)
x=delete_k(x,8)
print_Node(x)
count_Node(x)
# print(t)
        
